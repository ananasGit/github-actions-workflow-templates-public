on:
  workflow_dispatch:
    inputs:
      GIT-REF:
        description: Git Ref (Optional)
        required: false
      ECR_REPOSITORY:
        type: string
        description: ecr repository
        required: true
      BUILT_BRANCH:
        type: string
        description: built branch
        required: true
      DOCKER_FILE:
        type: string
        description: built branch
        required: true
      JAVA_VERSION:
        type: string
        description: argo cd repo
        required: true
      JAVA_VERSION_DISTRIBUTION:
        type: string
        description: argo cd repo branch
        required: true
      ARGO_CD_REPO:
        type: string
        description: argo cd repo
        required: false
      ARGO_CD_REPO_BRANCH:
        type: string
        description: argo cd repo branch
        required: false
      ARGO_CD_FILE_TO_UPDATE:
        type: string
        description: argo cd file to update
        required: false
      PUBLISH_UNIT_TEST_RESULTS:
        type: string
        description: sonarqube project name
        required: false
        default: "false"
    secrets:
      AWS_REGION:
        description: aws region
        required: true
      AWS_ACCESS_KEY_ID:
        description: aws access key
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: aws secret key
        required: true
      CHECKOUT_TOKEN:
        description: checkout token
        required: true
      INPUT_REF: $(echo ${{ inputs.GIT-REF }} | cut -c1-7)


name: Hotfix build and deploy to stage env

jobs:
  build:
    name: Build-Docker-Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/checkout@v3
        with:
          repository: 'ananasGit/github-actions-workflow-templates-scripts'
          token: ${{ secrets.CHECKOUT_TOKEN }}
          path: 'workflow-scripts'
          fetch-depth: 1
      - name: Clone Repository (Latest)
        uses: actions/checkout@v2
        if: inputs.GIT-REF == ''
        with:
          ref: hotfix
      - name: Clone Repository (Hotfix ref)
        uses: actions/checkout@v2
        if: inputs.GIT-REF != ''
        with:
          ref: ${{ inputs.GIT-REF }}

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: ${{ inputs.JAVA_VERSION_DISTRIBUTION }}
          java-version: ${{ inputs.JAVA_VERSION }}

      - name: Build with Gradle
        env:
          CHECKOUT_TOKEN: ${{ secrets.CHECKOUT_TOKEN }}
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/hotfix/build-with-gradle.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ inputs.BUILT_BRANCH }}
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/hotfix/build-tag-push-docker-image-to-aws-ecr.sh


  deploy:
    name: ArgoCD Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Add date when deployed
        run: mkdir $GITHUB_WORKSPACE/${{ inputs.ARGO_CD_CHECKOUT_FOLDER }}
        shell: bash

      - name: Checkout argoCD repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.ARGO_CD_REPO }}
          token: ${{ secrets.CHECKOUT_TOKEN }}
          path: ${{ inputs.ARGO_CD_CHECKOUT_FOLDER }}
          ref: ${{ inputs.ARGO_CD_REPO_BRANCH }}

      - name: Create local changes
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/hotfix/create-local-changes.sh

      - name: Commit files
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/hotfix/commit-files.sh
          

  promote:
    name: Pull & promote image from DEV to PROD ECR
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@master

      - name: Configure AWS credentials DEV
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr-dev
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull image from Amazon ECR dev
        id: pull-image
        env:
          ECR_REGISTRY_DEV: ${{ steps.login-ecr-dev.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          IMAGE_TAG_DEV: ${{ inputs.BUILT_BRANCH }}
        run: |
          # Pull image from ecr dev
          docker pull $ECR_REGISTRY_DEV/$ECR_REPOSITORY:$IMAGE_TAG_DEV-${{inputs.INPUT_REF}}

      - name: Configure AWS credentials Prod
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR prod
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag, and push image to Amazon ECR prod
        id: push-image
        env:
          ECR_REGISTRY_PROD: ${{ steps.login-ecr-prod.outputs.registry }}
          ECR_REGISTRY_DEV: ${{ steps.login-ecr-dev.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          IMAGE_TAG_DEV: ${{ inputs.BUILT_BRANCH }}
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/hotfix/build-tag-push-docker-image-to-aws-ecr.sh