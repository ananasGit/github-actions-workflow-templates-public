on:
  workflow_call:
    inputs:
      ECR_REPOSITORY:
        type: string
        description: ecr repository
        required: true
      BUILT_BRANCH:
        type: string
        description: built branch
        required: true
      ARGO_CD_REPO:
        type: string
        description: argo cd repo
        required: false
      ARGO_CD_REPO_BRANCH:
        type: string
        description: argo cd repo branch
        required: false
      ARGO_CD_FILE_TO_UPDATE:
        type: string
        description: argo cd file to update
        required: false
      SONARQUBE_PROJECT_KEY:
        type: string
        description: sonarqube project key
        required: false
      SONARQUBE_PROJECT_NAME:
        type: string
        description: sonarqube project name
        required: false
      PUBLISH_UNIT_TEST_RESULTS:
        type: string
        description: sonarqube project name
        required: false
        default: false

    secrets:
      AWS_REGION:
        description: aws region
        required: true
      AWS_ACCESS_KEY_ID:
        description: aws access key
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: aws secret key
        required: true
      CHECKOUT_TOKEN:
        description: checkout token
        required: true

name: Deploy on Sandbox env

jobs:
  build:
    name: Build-Docker-Image
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/checkout@v3
        with:
          repository: 'ananasGit/github-actions-workflow-templates-scripts'
          token: ${{ secrets.CHECKOUT_TOKEN }}
          path: 'workflow-scripts'
          fetch-depth: 1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.JAVA_VERSION_DISTRIBUTION }}
          java-version: ${{ inputs.JAVA_VERSION }}

      - name: Build with Gradle
        env:
          CHECKOUT_TOKEN: ${{ secrets.CHECKOUT_TOKEN }}
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/sandbox/build-with-gradle.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ inputs.BUILT_BRANCH }}
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/sandbox/build-tag-push-docker-image-to-aws-ecr.sh

  deploy:
    name: ArgoCD Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout argoCD repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.ARGO_CD_REPO }}
          token: ${{ secrets.CHECKOUT_TOKEN }}
          path: ${{ inputs.ARGO_CD_CHECKOUT_FOLDER }}
          ref: ${{ inputs.ARGO_CD_REPO_BRANCH }}
      - name: Extract workspace path name
        shell: bash
        run: echo "##[set-output name=directory;]$(echo $GITHUB_WORKSPACE)"
        id: extract_directory
      - name: Create local changes
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/sandbox/create-local-changes.sh
      - name: Commit files
        run: |
          $GITHUB_WORKSPACE/workflow-scripts/sandbox/commit-files.sh
